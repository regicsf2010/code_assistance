function [ap] = shafferNxN(p)
    t{3} = [3;1;1];
    t{4} = [6;3;3;3;2;1];
    t{5} = [10;6;6;6;6;4;4;3;2;1];
    t{6} = [15;10;10;10;10;10;7;7;7;6;4;4;3;2;1];
    t{7} = [21;15;15;15;15;15;15;11;11;11;11;10;9;7;7;6;5;4;3;2;1];
    t{8} = [28;21;21;21;21;21;21;21;16;16;16;16;16;15;13;13;12;11;10;9;...
            8;7;6;5;4;3;2;1];
    t{9} = [36;28;28;28;28;28;28;28;28;22;22;22;22;22;22;21;18;18;18;16;...
            16;15;13;13;12;11;10;9;8;7;6;5;4;3;2;1];
    t{10}= [45;36;36;36;36;36;36;36;36;36;29;29;29;29;29;29;29;28;24;24;...
            24;24;22;22;21;20;18;18;17;16;15;14;13;12;11;10;9;8;7;6;5;4;3;2;1];    
    
    k = length(p);
    m = k * (k - 1) / 2;
    
    vp = p(triu(true(k), 1)); % convert upper triangular into a vector
    [pi, idx] = sort(vp); 
    ap_aux = zeros(1, m);
    
    d = t{k};
    for j = 1 : m
        aux = d(1 : j) .* pi(1 : j);
        ap_aux(j) = min(max(aux), 1);
    end
    
    ap_aux(idx') = ap_aux;
    
    ap = triu(ones(k), 1); 
    ap(ap > 0) = ap_aux; % convert a vector to upper triangular     
end
